#!/usr/bin/env bash

create_release_directory() {
    if [[ ! -d "${RELEASE_DIR}" ]]; then
        echo "Creating directory ${RELEASE_DIR}..."
        mkdir "${RELEASE_DIR}"
    else
        echo "Release folder ${RELEASE_DIR} exists..."
    fi
}


announce_exit() {
    echo
    echo "***** end pre-commit *****"
    exit ${1}
}

# Expects two arguments, the new diff filenames and the file to update
add_diff_to_file() {
    if [[ ! -z "${1}" ]]; then
        POP_STASH="false"

        create_release_directory

        # Check if there are unstaged changes to this release file.
        # Need to check before the hook itself changes it below.
        if [[ ! -z $(git diff --name-status -- "${2}") ]]; then
            echo "${2} has unstaged changes."
            POP_STASH="true"
        fi

        # Add a new line to the end of the manifest in case there's not one already.
        # This will also create a new manifest file if one doesn't exist.
        echo "" >> "${2}"
        # Add the new items from this commit's diff
        echo "${MANIFEST}" >> "${2}"
        # Remove duplicate lines and write new manifest to temp file
        awk '!seen[$0]++' "${2}" > "${2}.temp"

        cp "${2}.temp" "${2}"

        # For each commented line, make sure an uncommented line wasn't added back in
        echo "${MANIFEST}" |
        while read line
        do
            echo "$line"
            if [[ $(grep -c "^#$line" "$2") -gt 0 ]]; then
                echo "Skipping $line since it's already commented..."
                grep -v "^$line" "$2" > "$2.temp"
                cp "$2.temp" "$2"
            fi
        done

        rm "${2}.temp"
		
		echo "Adding ${2} to the commit"
        git add "${2}"
		
    fi
	if [[ ! -f "${RELEASE_DIR}/runtests.txt" ]]; then
        echo "Creating a file runtests.txt..."
        RUNTEST_FILE="${RELEASE_DIR}/runtests.txt"
		echo "#Atleast one test class needed in runtests.txt file to run the build" >> ${RUNTEST_FILE}
    else
        echo "runtests.txt already exists..."
    fi
	
	}
	
	add_delete_to_file() {
    if [[ ! -z "${1}" ]]; then
        POP_STASH="false"

        create_release_directory

        # Check if there are unstaged changes to this release file.
        # Need to check before the hook itself changes it below.
        if [[ ! -z $(git diff --name-status --diff-filter=D -- "${2}") ]]; then
            echo "${2} has unstaged changes."
            POP_STASH="true"
        fi

        # Add a new line to the end of the Destructive in case there's not one already.
        # This will also create a new Destructive file if one doesn't exist.
        echo "" >> "${2}"
        # Add the new items from this commit's diff
        echo "${DESTRUCTIVE}" >> "${2}"
        # Remove duplicate lines and write new manifest to temp file
        awk '!seen[$0]++' "${2}" > "${2}.temp"

        cp "${2}.temp" "${2}"

        # For each commented line, make sure an uncommented line wasn't added back in
        echo "${DESTRUCTIVE}" |
        while read line
        do
            echo "$line"
            if [[ $(grep -c "^#$line" "$2") -gt 0 ]]; then
                echo "Skipping $line since it's already commented..."
                grep -v "^$line" "$2" > "$2.temp"
                cp "$2.temp" "$2"
            fi
        done

        rm "${2}.temp"
		
		echo "Adding ${2} to the commit"
        git add "${2}"
		
    fi
	if [[ ! -f "${RELEASE_DIR}/destructive.txt" ]]; then
        echo "Creating a file destructive.txt..."
        DESTRUCTIVE="${RELEASE_DIR}/destructive.txt"
		echo "#destructive changes" >> ${DESTRUCTIVE}
    else
        echo "destructive.txt already exists..."
    fi
	
	if [[ ! -f "${RELEASE_DIR}/destructivePre.txt" ]]; then
        echo "Creating a file destructivePre.txt..."
        DESPRE_FILE="${RELEASE_DIR}/destructivePre.txt"
		echo "#Pre-destructive changes" >> ${DESPRE_FILE}
    else
        echo "destructivePre.txt already exists..."
    fi
	
}

echo "Entering pre-commit hook..."

if [[ ! -z $(git rev-parse -q --verify MERGE_HEAD) ]]; then
    echo "MERGE_HEAD exists...skipping manifest hook"
    announce_exit 0
fi

BRANCH_NAME=$(git branch | grep \* | cut -d ' ' -f2 | cut -d'/' -f2)
RELEASE_DIR=$(echo "${BRANCH_NAME}" | sed "s#^#release/#")

if [ "${BRANCH_NAME}" = "develop" ] || [ "${BRANCH_NAME}" = "release" ] || [ "${BRANCH_NAME}" = "master" ]; then
    echo "Committing directly to primary git-flow branches...skipping manifest hook"
    announce_exit 0
fi

MANIFEST=$(git diff --name-status --diff-filter=ACMRTUXB --cached src)
MANIFEST_FILE="${RELEASE_DIR}/manifest.txt"

# TODO: Handle deleted files that are already in manifest
# TODO: Handle renamed files?
# git diff has a --find-renames option that may be useful.
DESTRUCTIVE=$(git diff --name-only --diff-filter=D --cached)
DESTRUCTIVE_FILE="${RELEASE_DIR}/destructive.txt"


add_diff_to_file "${MANIFEST}" "${MANIFEST_FILE}"
add_delete_to_file "${DESTRUCTIVE}" "${DESTRUCTIVE_FILE}"
add_delete_to_file "${DESPRE_FILE}"
add_diff_to_file "${RUNTEST_FILE}"

announce_exit 0
